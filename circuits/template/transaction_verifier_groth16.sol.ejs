contract TransactionVerifier {
    using Pairing for *;

    struct VerifyingKey {
        Pairing.G1Point alfa1;
        Pairing.G2Point beta2;
        Pairing.G2Point gamma2;
        Pairing.G2Point delta2;
        Pairing.G1Point[] IC;
    }

    struct Proof {
        Pairing.G1Point A;
        Pairing.G2Point B;
        Pairing.G1Point C;
    }

    function verifyingKey() internal pure returns (VerifyingKey memory vk) {
        vk.alfa1 = Pairing.G1Point(
            <%=vk_alpha_1[0]%>,
            <%=vk_alpha_1[1]%>
        );
        vk.beta2 = Pairing.G2Point(
            [<%=vk_beta_2[0][1]%>,
            <%=vk_beta_2[0][0]%>],
            [<%=vk_beta_2[1][1]%>,
            <%=vk_beta_2[1][0]%>]
        );
        vk.gamma2 = Pairing.G2Point(
            [<%=vk_gamma_2[0][1]%>,
            <%=vk_gamma_2[0][0]%>],
            [<%=vk_gamma_2[1][1]%>,
            <%=vk_gamma_2[1][0]%>]
        );
        vk.delta2 = Pairing.G2Point(
            [<%=vk_delta_2[0][1]%>,
            <%=vk_delta_2[0][0]%>],
            [<%=vk_delta_2[1][1]%>,
            <%=vk_delta_2[1][0]%>]
        );
        vk.IC = new Pairing.G1Point[](<%=IC.length%>);
        <% for (let i=0; i<IC.length; i++) { %>
        vk.IC[<%=i%>] = Pairing.G1Point(
            <%=IC[i][0]%>,
            <%=IC[i][1]%>
        );
        <% } %>
    }

    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {
        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
        VerifyingKey memory vk = verifyingKey();
        require(input.length + 1 == vk.IC.length, "verifier-bad-input");
        // Compute the linear combination vk_x
        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);
        for (uint i = 0; i < input.length; i++) {
            require(input[i] < snark_scalar_field, "verifier-gte-snark-scalar-field");
            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));
        }
        vk_x = Pairing.addition(vk_x, vk.IC[0]);
        if (!Pairing.pairingProd4(
            Pairing.negate(proof.A), proof.B,
            vk.alfa1, vk.beta2,
            vk_x, vk.gamma2,
            proof.C, vk.delta2
        )) return 1;
        return 0;
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint[2] memory a,
        uint[2][2] memory b,
        uint[2] memory c,
        uint[<%=IC.length-1%>] memory input
    ) public view returns (bool r) {
        Proof memory proof;
        proof.A = Pairing.G1Point(a[0], a[1]);
        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
        proof.C = Pairing.G1Point(c[0], c[1]);
        uint[] memory inputValues = new uint[](input.length);
        for (uint i = 0; i < input.length; i++) {
            inputValues[i] = input[i];
        }
        if (verify(inputValues, proof) == 0) {
            return true;
        } else {
            return false;
        }
    }
}