contract DepositVerifier {
    using Pairing for *;

    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;

    struct VerifyingKey {
        Pairing.G1Point alfa1;
        Pairing.G2Point beta2;
        Pairing.G2Point gamma2;
        Pairing.G2Point delta2;
        Pairing.G1Point[] IC;
    }

    function verifyingKey() internal pure returns (VerifyingKey memory vk) {
        vk.alfa1 = Pairing.G1Point(
            <%=vk_alpha_1[0]%>,
            <%=vk_alpha_1[1]%>
        );
        vk.beta2 = Pairing.G2Point(
            [<%=vk_beta_2[0][1]%>,
            <%=vk_beta_2[0][0]%>],
            [<%=vk_beta_2[1][1]%>,
            <%=vk_beta_2[1][0]%>]
        );
        vk.gamma2 = Pairing.G2Point(
            [<%=vk_gamma_2[0][1]%>,
            <%=vk_gamma_2[0][0]%>],
            [<%=vk_gamma_2[1][1]%>,
            <%=vk_gamma_2[1][0]%>]
        );
        vk.delta2 = Pairing.G2Point(
            [<%=vk_delta_2[0][1]%>,
            <%=vk_delta_2[0][0]%>],
            [<%=vk_delta_2[1][1]%>,
            <%=vk_delta_2[1][0]%>]
        );
        vk.IC = new Pairing.G1Point[](<%=IC.length%>);
        <% for (let i=0; i<IC.length; i++) { %>
        vk.IC[<%=i%>] = Pairing.G1Point(
            <%=IC[i][0]%>,
            <%=IC[i][1]%>
        );
        <% } %>
    }

    function verifyProof(
        bytes memory proof,
        uint[<%=IC.length-1%>] memory input
    ) public view returns (bool) {
        uint256[8] memory p = abi.decode(proof, (uint256[8]));

        Pairing.G1Point memory a = Pairing.G1Point(p[0], p[1]);
        Pairing.G2Point memory b = Pairing.G2Point([p[2], p[3]], [p[4], p[5]]);
        Pairing.G1Point memory c = Pairing.G1Point(p[6], p[7]);

        VerifyingKey memory vk = verifyingKey();
        require(input.length + 1 == vk.IC.length, "verifier-bad-input");

        // Compute the linear combination vk_x
        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);
        for (uint256 i = 0; i < input.length; i++) {
            require(input[i] < SNARK_SCALAR_FIELD, "verifier-gte-snark-scalar-field");
            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));
        }
        vk_x = Pairing.addition(vk_x, vk.IC[0]);

        return Pairing.pairingProd4(Pairing.negate(a), b, vk.alfa1, vk.beta2, vk_x, vk.gamma2, c, vk.delta2);
    }
}